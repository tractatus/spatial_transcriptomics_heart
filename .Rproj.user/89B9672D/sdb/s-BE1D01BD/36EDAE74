{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Spatial transcriptomics high-level 3D data analysis\"\noutput: rmarkdown::github_document\nalways_allow_html: yes\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n## Description of the data\n\nBegin by loading the pre-processed data:\n\n```{r}\nload('./data/ST_heart_08032018.RData')\n```\n\nLets see what it contains:\n\n```{r}\nnames(heart)\n```\n\nThere are two data frames one with the RNAseq data and one with the atlas data. \nEvery row is  a spot and the two data frames are matched so `heart$atlas[123,]` is the same spot as `heart$genes[123,]`.\n```{r}\nhead(heart$atlas)\nheart$genes[1:10,1:4]\n```\n\nSo lets explain the variables in `heart$atlas`:\n```{r}\nnames(heart$atlas)\n```\n| Variable | Explanation      |\n| :---         |     :---      | \n| `x`   | X centroid of spot in  original pixel image  | \n| `y`     | Y centroid of spot in  original pixel image |\n| `intensity`  | not really used here. |\n| `area`  | area in pixels of spot. |\n| `id`  | unique integer value for the region the spot is in. |\n| `color`  | hex color code for the region the spot is in. |\n| `color2`  | Color code corrected for spots that couldn't be assigned |             \n| `acronym`  | region acronym for where the spot is in. |\n| `name`  | region name for where the spot is in. |\n| `right.left`  | X coordinate in pixels of the reference atlas |\n| `rostral.caudal`  | Y coordinate in pixels of the reference atlas. |\n| `anterior.posterior`  | Z oordinate in pixels of the reference atlas |             \n| `spot.id`  | just `1:now(heart$atlas)` |\n| `nuclei`  | number of nuclei in spot |             \n| `image`  | The image the spots came from |             \n| `spot.pos`  | The array position of the spot in 33x35 |             \n\n## 3D heart plot using RGL\n\nRGL is a package that uses OpPenGL as backend for 3D visualization in R.\nmisc3d is a package that we will use for drawing scenes in 3d.\n\n```{r message=FALSE, results='hide',fig.keep='all', warning=FALSE}\nlibrary(rgl)\nlibrary(misc3d)\n```\n\nLoad the 3D volume heart atlas.\n```{r}\nload('./data/heart.RData')\n```\n\nWe begin by defining the perspective we want to plot from (this doesn't have to make sense now I'll show later how to get these parameters):\n```{r}\nperspective<-list(FOV = 30, ignoreExtent = FALSE, listeners = 1L, \n    mouseMode = structure(c(\"trackball\", \"zoom\", \"fov\", \"pull\"\n    ), .Names = c(\"left\", \"right\", \"middle\", \"wheel\")), skipRedraw = FALSE, \n    userMatrix = structure(c(-0.0108720660209656, 0.899227440357208, \n    0.437346190214157, 0, 0.955604612827301, -0.119448974728584, \n    0.269354522228241, 0, 0.2944515645504, 0.420858442783356, \n    -0.858007192611694, 0, 0, 0, 0, 1), .Dim = c(4L, 4L)), scale = c(1, \n    1, 1), viewport = structure(c(0L, 0L, 1280L, 720L), .Names = c(\"x\", \n    \"y\", \"width\", \"height\")), zoom = 1, windowRect = c(0L, 45L, \n    1280L, 765L), family = \"sans\", font = 1L, cex = 1, useFreeType = TRUE)\n```\nLets plot the entire heart and then regions outlines.\n\n```{r message=FALSE, results='hide',fig.keep='all', warning=FALSE}\n#open 3D plot window\nopen3d(windowRect = c(0, 0, 1280, 720))\n#use the perspective\npar3d(perspective)\n#draw low-resolution heart with color coding\ndrawScene.rgl(organ.dwnsmp[which(names(organ.dwnsmp)%in%c('WH',  'RA', 'RV', 'LA', 'LV', 'P', 'A', 'OT'))])\nrgl.snapshot(file='./images/lowresolution.png')\n```\n![Low resolution anaotmy heart.](./images/lowresolution.png)\nThis is a low resolution of the heart that you can rotate and zoom in with the ouse in realtime. \n\nIf you have rotated the heart and want to save the perspective parameters into a R object to use later simply run:\n\n```{r}\npp<- par3d(no.readonly = TRUE)\n```\nAnd the parameters are now saved into `pp` and you can set the perspective in the 3D plot by `par3d(pp)` before plotting with `drawScene.rgl()`.\n\nFor more high resolution rendering you set the position you want of the heart and then rerun the code but not using the `organ.dwnsmp` but `organ` instead.\n\n```{r message=FALSE, results='hide',fig.keep='all', warning=FALSE}\ndrawScene.rgl(organ[which(names(organ.dwnsmp)%in%c('WH',  'RA', 'RV', 'LA', 'LV', 'P', 'A', 'OT'))])\nrgl.snapshot(file='./images/highresolution.png')\n```\n![High resolution anaotmy heart.](./images/highresolution.png)\n\nYou can select which region to highlight by setting the acronyms in the character vector. here I show `WH` whole heart as well as `OT` outflow tract:\n\n```{r message=FALSE, results='hide',fig.keep='all', warning=FALSE}\ndrawScene.rgl(organ[which(names(organ.dwnsmp)%in%c('WH','OT'))])\nrgl.snapshot(file='./images/OT_highlight.png')\n```\n![Showing OT.](./images/OT_highlight.png)\n\nLets plot all the spots with the color according to their anatomical region:\n\n\n```{r message=FALSE, results='hide',fig.keep='all', warning=FALSE}\n#draw all the spots with region color\ndrawScene.rgl(organ[which(names(organ.dwnsmp)%in%c('WH'))])\nradius.of.spots.in.atlas.pixels<- (100/(2383.36/532))/3\nspheres3d(598-heart$atlas$rostral.caudal, heart$atlas$right.left, heart$atlas$anterior.posterior, col=heart$atlas$color2, radius=radius.of.spots.in.atlas.pixels)\n#bounding box\nbox3d()\nrgl.snapshot(filename='./images/3d_heart_spots.png')\n```\n![Showing spots in 3D.](./images/3d_heart_spots.png)\n\nFinally lets plot the gene expression of specific spots:\n```{r message=FALSE, results='hide',fig.keep='all', warning=FALSE}\n#plot gene of interest OGN\ngene.of.interest<-heart$genes[,which(colnames(heart$genes)=='ENSG00000106809')]\n\n#color ramp palette base don gene expression\nPaletteFunction <- colorRampPalette(c(\"blue\", \"white\", \"red\"), space = \"Lab\")\ngene.expression<-PaletteFunction(100)[as.numeric(cut(scale(log2(gene.of.interest+1)), breaks = 100))]\n\ndrawScene.rgl(organ[which(names(organ.dwnsmp)%in%c('WH'))])\n\nspheres3d(598-heart$atlas$rostral.caudal, heart$atlas$right.left, heart$atlas$anterior.posterior, col=gene.expression, radius=radius.of.spots.in.atlas.pixels )\nrgl.snapshot(filename='./images/OGN_3d_heart.png')\n```\n![Showing OGN.](./images/OGN_3d_heart.png)\n\n## tSNE example.\n\nLets get the data ready for Seurat package:\n```{r, message=FALSE, results='hide',fig.keep='all', warning=FALSE}\n#Set all genes not detected oin other sections (they are NA) to 0 count.\ntmp<-heart$genes\ntmp[which(is.na(tmp), arr.ind = TRUE)]<-0\n\n#needs to be transposed for Seurat\ntmp<-t(tmp)\n#use indices instead of spot ID (e.g. 13x24).\ncolnames(tmp)<-seq_along(colnames(tmp))\n```\nThen load Seurat and make Seurat objects:\n```{r, message=FALSE, results='hide',fig.keep='all', warning=FALSE}\nlibrary(Seurat)\n#make Seurat object with min 1000 genes\nseurat.object<-CreateSeuratObject(tmp,project=\"STheart\", min.cells = 3, names.field = 2, min.genes = 1000)\n```\nNext we normalize the data and subset only differentially expressed genes with average expression cutoff of 0.5 to 5 and dispersion cutoff of >2.\n```{r, message=FALSE, results='hide',fig.keep='all', warning=FALSE}\n#normalize\nseurat.object <- NormalizeData(object = seurat.object, normalization.method = \"LogNormalize\", scale.factor = 10000)\n#do cut off for diff expressed genes\nseurat.object <- FindVariableGenes(object = seurat.object, mean.function = ExpMean, dispersion.function = LogVMR, x.low.cutoff = 0.5, x.high.cutoff = 5, y.cutoff = 0.8)\n#scale here (can also regress out things)\nseurat.object <- ScaleData(object = seurat.object) #, vars.to.regress=names(images)\n```\nCompute PCA:\n```{r, message=FALSE, results='hide',fig.keep='all', warning=FALSE}\n#compute 100 PCAs\nseurat.object <- RunPCA(object = seurat.object, pc.genes = seurat.object@var.genes, do.print = TRUE, pcs.compute = 100)\nseurat.object <- JackStraw(object = seurat.object, num.replicate = 100, do.print = FALSE)\nPCElbowPlot(object = seurat.object, num.pc=100)\n```\n\nBased on the info from the knee-plot we will use only the first 12 PCAs as input to tSNE:\n```{r, message=FALSE, results='hide',fig.keep='all', warning=FALSE}\n#the first 12 CA contains most info\nseurat.object <- FindClusters(object = seurat.object, reduction.type = \"pca\", dims.use = 1:12, resolution = 1, print.output = TRUE, save.SNN = FALSE)\n#run the TSNE\nseurat.object <- RunTSNE(object = seurat.object, dims.use = 1:12, do.fast = TRUE, check_duplicates = FALSE)\n```\n\nThis will plot the tSNE with anatomical color:\n\n```{r}\n#anatomical color with slight transparency 80%.\nanatomical.color <- paste0(heart$atlas$color2[as.integer(colnames(seurat.object@scale.data))], '80')\n#plot the tSNE\npar(mfrow=c(1,2))\nplot(seurat.object@dr$tsne@cell.embeddings, pch=16, cex=0.9, col=paste0(heart$atlas$color2[as.integer(colnames(seurat.object@scale.data))], '80'), asp=1, xlab='', ylab='', main='', axes=FALSE)\n\n#plot legend is seperate plot\nlegend.data<-data.frame(col = unique(heart$atlas$color2), acronym = na.omit(unique(heart$atlas$acronym)), name = na.omit(unique(heart$atlas$name)) )\nlegend.data<-legend.data[order(legend.data[,2]),]\npar(mar=c(4,0,4,0))\nplot(0,0, xlim=c(0,5), ylim=c(-5, nrow(legend.data)+5), col=0, axes=FALSE, xlab='', yab='')\npoints(rep(0, nrow(legend.data)), 1:nrow(legend.data), pch=21, bg=as.character(legend.data$col))\ntext(rep(0, nrow(legend.data)), 1:nrow(legend.data), legend.data$acronym, pos=4)\ntext(rep(1, nrow(legend.data)), 1:nrow(legend.data), legend.data$name, pos=4)\n```\n\n",
    "created" : 1520544988363.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3653599520",
    "id" : "36EDAE74",
    "lastKnownWriteTime" : 1520620331,
    "last_content_update" : 1520620331268,
    "path" : "~/Documents/GitHub/spatial_transcriptomics_heart/markdown_output.Rmd",
    "project_path" : "markdown_output.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}