{
    "collab_server" : "",
    "contents" : "load('./data/ST_heart_08032018.RData')\n\n#Set all genes not detected oin other sections (they are NA) to 0 UMI count.\ntmp<-heart$genes\ntmp[which(is.na(tmp), arr.ind = TRUE)]<-0\n\n#needs to be transposed for Seurat\ntmp<-t(tmp)\n#use indices instead of spot ID (e.g. 13x24).\ncolnames(tmp)<-seq_along(colnames(tmp))\n\nlibrary(Seurat)\n#make Seurat object with min 1000 genes\nseurat.object<-CreateSeuratObject(tmp,project=\"STheart\", min.cells = 3, names.field = 2, min.genes = 1000)\n#could add meta data here\nseurat.object <- AddMetaData(object = seurat.object) #, metadata = images\n#normalize\nseurat.object <- NormalizeData(object = seurat.object, normalization.method = \"LogNormalize\", scale.factor = 10000)\n#do cut off for diff expressed genes\nseurat.object <- FindVariableGenes(object = seurat.object, mean.function = ExpMean, dispersion.function = LogVMR, x.low.cutoff = 0.2, x.high.cutoff = 5, y.cutoff = 0.5)\n#scale here (can also regress out things)\nseurat.object <- ScaleData(object = seurat.object) #, vars.to.regress=names(images)\n#compute 100 PCAs\nseurat.object <- RunPCA(object = seurat.object, pc.genes = seurat.object@var.genes, do.print = TRUE, pcs.compute = 100)\nseurat.object <- JackStraw(object = seurat.object, num.replicate = 100, do.print = FALSE)\nPCElbowPlot(object = seurat.object, num.pc=100)\n\n#the first 12 CA contains most info\nseurat.object <- FindClusters(object = seurat.object, reduction.type = \"pca\", dims.use = 1:12, resolution = 1, print.output = TRUE, save.SNN = TRUE)\n#run the TSNE\nseurat.object <- RunTSNE(object = seurat.object, dims.use = 1:12, do.fast = TRUE, check_duplicates = FALSE, max_iter=1000)\n\n#plot the tSNE\n\npar(mfrow=c(1,2))\nplot(seurat.object@dr$tsne@cell.embeddings, pch=16, cex=0.9, col=paste0(heart$atlas$color2[as.integer(colnames(seurat.object@scale.data))], '80'), asp=1, xlab='', ylab='', main='', axes=FALSE)\nlegend.data<-data.frame(col = unique(heart$atlas$color2), acronym = na.omit(unique(heart$atlas$acronym)), name = na.omit(unique(heart$atlas$name)) )\nlegend.data<-legend.data[order(legend.data[,2]),]\n\npar(mar=c(4,0,4,0))\nplot(0,0, xlim=c(0,5), ylim=c(-5, nrow(legend.data)+5), col=0, axes=FALSE)\npoints(rep(0, nrow(legend.data)), 1:nrow(legend.data), pch=21, bg=as.character(legend.data$col))\ntext(rep(0, nrow(legend.data)), 1:nrow(legend.data), legend.data$acronym, pos=4)\ntext(rep(1, nrow(legend.data)), 1:nrow(legend.data), legend.data$name, pos=4)\n\n\n\n########################\n#\n########################\n#load 3D heart\nload('./data/heart.RData')\n\nlibrary(rgl)\n#open 3D plot window\nopen3d(windowRect = c(0, 0, 1280, 720))\n#draw low-resolution heart with color coding\ndrawScene.rgl(organ.dwnsmp[which(names(organ.dwnsmp)%in%c('WH',  'RA', 'RV', 'LA', 'LV', 'P', 'A', 'OT'))])\n\n#draw heart without color coding\ndrawScene.rgl(organ.dwnsmp[which(names(organ.dwnsmp)%in%c('WH'))])\n\n#draw high resolution of heart\ndrawScene.rgl(organ[which(names(organ.dwnsmp)%in%c('WH'))])\n#bounding box\nbox3d()\n\n#draw all the spots with region color\ndrawScene.rgl(organ.dwnsmp[which(names(organ.dwnsmp)%in%c('WH'))])\nspheres3d(598-heart$atlas$rostral.caudal, heart$atlas$right.left, heart$atlas$anterior.posterior, col=heart$atlas$color2, radius=5)\n\n#save 3D image\nrgl.snapshot(file='test3dheart.png')\n\n#plot gene of interest OGN\ngene.of.interest<-heart$genes[,which(colnames(heart$genes)=='ENSG00000106809')]\n\n#color ramp palette base don gene expression\nPaletteFunction <- colorRampPalette(c(\"blue\", \"white\", \"red\"), space = \"Lab\")\ngene.expression<-PaletteFunction(100)[as.numeric(cut(scale(log2(gene.of.interest+1)), breaks = 100))]\n\ndrawScene.rgl(organ.dwnsmp[which(names(organ.dwnsmp)%in%c('WH'))])\nspheres3d(598-master.dataset$rostral.caudal, master.dataset$right.left, master.dataset$anterior.posterior, col=gene.expression, radius=5)\nrgl.snapshot(filename='OGN_3d_heart.png')\n\n",
    "created" : 1520544870160.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3217377095",
    "id" : "96D7CE81",
    "lastKnownWriteTime" : 1520619761,
    "last_content_update" : 1520619761275,
    "path" : "~/Documents/GitHub/spatial_transcriptomics_heart/example_script.R",
    "project_path" : "example_script.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}